---
images:
  tags:
    nginx: "{{ containerd_insecure_registries.local_registry }}/library/nginx:1.18.0"
    bootstrap: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    db_init: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    db_drop: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    ks_user: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    ks_service: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    ks_endpoints: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/heat:yoga-ubuntu_focal"
    neutron_dhcp: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_l3: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_l2gw: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_linuxbridge_agent: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_metadata: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_openvswitch_agent: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_rpc_server: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_bagpipe_bgp: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_netns_cleanup_cron: "{{ containerd_insecure_registries.local_registry }}/openstackhelm/neutron:yoga-ubuntu_focal"
    neutron_server: "{{ containerd_insecure_registries.local_registry }}/kolla/ubuntu-source-neutron-server:yoga"
    neutron_bgp_dragent: "{{ containerd_insecure_registries.local_registry }}/kolla/ubuntu-source-neutron-bgp-dragent:yoga"
    neutron_db_sync: "{{ containerd_insecure_registries.local_registry }}/kolla/ubuntu-source-neutron-bgp-dragent:yoga"
    dep_check: "{{ containerd_insecure_registries.local_registry }}/airshipit/kubernetes-entrypoint:v1.0.0"

network:
  server:
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/backend-protocol: "https"
  backend:
  - openvswitch
  share_namespaces: true
  interface:
    tunnel: {{ neutron.tunnel }}
    tunnel_compute: {{ neutron.tunnel_compute }}
labels:
  agent:
    dhcp:
      node_selector_key: openstack-network-plane
      node_selector_value: enabled
    bgp_dragent:
      node_selector_key: openstack-network-plane
      node_selector_value: enabled
    l3:
      node_selector_key: openstack-network-dvr
      node_selector_value: enabled
    metadata:
      node_selector_key: openstack-network-dvr
      node_selector_value: enabled
  job:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
  netns_cleanup_cron:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
  test:
    node_selector_key: openstack-network-plane
    node_selector_value: enabled
pod:
  resources:
    nginx:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
  probes:
    bgp_dragent:
      bgp_dragent:
        readiness:
          enabled: true
          params:
            initialDelaySeconds: 30
            periodSeconds: 190
            timeoutSeconds: 185
        liveness:
          enabled: true
          params:
            initialDelaySeconds: 120
            periodSeconds: 600
            timeoutSeconds: 580
  replicas:
    server: {{ pod.replicas }}
  security_context:
    neutron_server:
      pod:
        runAsUser: 0
      container:
        neutron_server:
          readOnlyRootFilesystem: false
    neutron_bgp_dragent:
      pod:
        runAsUser: 42435
      container:
        neutron_bgp_dragent_init:
          runAsUser: 0
          readOnlyRootFilesystem: true
  mounts:
    neutron_server:
      init_container: null
      neutron_server:
        volumeMounts:
          - name: timezone
            mountPath: /etc/localtime
        volumes:
          - name: timezone
            hostPath:
              path: /etc/localtime
    neutron_bgp_dragent:
      init_container: null
      neutron_bgp_dragent:
        volumeMounts:
          - name: timezone
            mountPath: /etc/localtime
        volumes:
          - name: timezone
            hostPath:
              path: /etc/localtime
conf:
  db_acl:
    enabled: true
{% raw %}
  nginx: |
    worker_processes 1;
    daemon off;
    user nginx;

    events {
      worker_connections 1024;
    }

    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;

      sendfile on;
      keepalive_timeout 65s;
      tcp_nodelay on;

      log_format main '[nginx] method=$request_method path=$request_uri '
                      'status=$status upstream_status=$upstream_status duration=$request_time size=$body_bytes_sent '
                      '"$remote_user" "$http_referer" "$http_user_agent"';

      access_log /dev/stdout  main;

      upstream websocket {
        server 127.0.0.1:$PORT;
      }

      server {
        server_name {{ printf "%s.%s.svc.%s" "${SHORTNAME}" .Release.Namespace .Values.endpoints.cluster_domain_suffix }};
        listen $POD_IP:$PORT ssl;

        client_max_body_size  0;

        ssl_certificate      /etc/nginx/certs/tls.crt;
        ssl_certificate_key  /etc/nginx/certs/tls.key;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

        location / {
          proxy_pass_request_headers on;

          proxy_http_version  1.1;
          proxy_pass          http://websocket;
          proxy_read_timeout  90;
        }
      }
    }
{% endraw %}
  neutron:
    DEFAULT:
      bind_host: 127.0.0.1
      debug: True
      router_distributed: True
      core_plugin: ml2
      global_physnet_mtu: {{ openstack_mtu }}
      service_plugins: neutron_dynamic_routing.services.bgp.bgp_plugin.BgpPlugin,neutron.services.l3_router.l3_router_plugin.L3RouterPlugin
      #service_plugins: router
      l3_ha_network_type: vxlan
      dhcp_agents_per_network: 2
    nova:
      cafile: /etc/neutron/certs/ca.crt
    keystone_authtoken:
      cafile: /etc/neutron/certs/ca.crt
    oslo_messaging_rabbit:
      ssl: true
      ssl_ca_file: /etc/rabbitmq/certs/ca.crt
      ssl_cert_file: /etc/rabbitmq/certs/tls.crt
      ssl_key_file: /etc/rabbitmq/certs/tls.key
    quotas:
      quota_network: -1
      quota_subnet: -1
      quota_port: -1
      quota_router: -1
      quota_floatingip: -1
      quota_security_group: -1
      quota_security_group_rule: -1
{% if neutron_ml2_plugin == "ovs" %}
  auto_bridge_add:
{% for b in ovs_provider %}
    {{ b.bridge }}:{{ b.iface }}
{% endfor %}
{% endif %}

  plugins:
    ml2_conf:
      ml2:
        extension_drivers: port_security
        type_drivers: flat{% if ovs_provider[0].vlan_ranges %},vlan{% endif %},vxlan
        tenant_network_types: vxlan
      ml2_type_flat:
        flat_networks: "*"
{% if neutron_ml2_plugin == "ovs" %}
{% if ovs_provider[0].vlan_ranges %}
      ml2_type_vlan:
        network_vlan_ranges: "{%- for b in ovs_provider %}{{ b.name }}:{{ b.vlan_ranges }},{% endfor %}"
{% endif %}
{% endif %}
{% if neutron_ml2_plugin == "ovs" %}
    openvswitch_agent:
      ovs:
        bridge_mappings: "{%- for b in ovs_provider %}{{ b.name }}:{{ b.bridge }},{% endfor %}"
      securitygroup:
        firewall_driver: openvswitch
      agent:
        enable_distributed_routing: {{ ovs_dvr | ternary('True', 'False') }}
        tunnel_types: vxlan
        l2_population: True
        arp_responder: True
  l3_agent:
    DEFAULT:
      interface_driver: openvswitch
      agent_mode: {{ ovs_dvr | ternary('dvr', 'legacy') }}
{% endif %}
{% if bgp_dragent %}
  bgp_dragent:
    DEFAULT:
      debug: true
    bgp:
      bgp_speaker_driver: neutron_dynamic_routing.services.bgp.agent.driver.os_ken.driver.OsKenBgpDriver
      bgp_router_id: 127.0.0.1
{% endif %}
  dhcp_agent:
    DEFAULT:
      force_metadata: True
  metadata_agent:
    DEFAULT:
      nova_metadata_port: 8443
      auth_ca_cert: /etc/ssl/certs/openstack-helm.crt
      nova_metadata_protocol: https

endpoints:
  oslo_db:
    auth:
      admin:
        username: root
        password: {{ mariadb.admin_password }}
      neutron:
        username: neutron
        password: {{ neutron.password }}
  oslo_messaging:
    port:
      https:
        default: 15680
    auth:
      admin:
        username: rabbitmq
        password: {{ rabbitmq.password }}
      neutron:
        username: neutron
        password: {{ neutron.password }}
    statefulset: null
  identity:
    name: keystone
    auth:
      admin:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: admin
        password: {{ os_admin_password }}
      neutron:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: neutron
        password: {{ neutron.password }}
      nova:
        cacert: /etc/ssl/certs/openstack-helm.crt
        username: nova
        password: {{ nova.password }}
      test:
        cacert: /etc/ssl/certs/openstack-helm.crt
    scheme:
      default: https
    port:
      api:
        default: 8443
        public: 8443
  compute:
    scheme:
      default: https
    port:
      api:
        public: 8443
  compute_metadata:
    scheme:
      default: https
    port:
      metadata:
        public: 8443
  network:
    host_fqdn_override:
      default:
        tls:
          secretName: neutron-tls-server
          duration: {{ tls.duration }}
          renewBefore: {{ tls.renewBefore }}
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
    scheme:
      default: https
    port:
      api:
        public: 8443
  ingress:
    port:
      ingress:
        default: 8443

manifests:
  daemonset_lb_agent: false
  daemonset_ovs_agent: true
  daemonset_sriov_agent: false
  daemonset_metadata_agent: true
  daemonset_bgp_dragent: true
  certificates: true
...
