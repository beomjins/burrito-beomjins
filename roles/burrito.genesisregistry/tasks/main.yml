---
- name: Genesis Registry | create registry root directory
  ansible.builtin.file:
    path: "{{ genesis_registry.root_dir }}"
    state: directory
  become: true

- name: Genesis Registry | copy registry binary to other controllers
  ansible.builtin.copy:
    dest: "/usr/bin/registry"
    src: "/usr/bin/registry"
    owner: "root"
    group: "root"
    mode: "0755"
  become: true
  when: inventory_hostname != groups['kube_control_plane'][0]

- name: Genesis Registry | copy systemd service file
  ansible.builtin.copy:
    dest: "{{ item.dest }}"
    src: "{{ ansible_os_family | lower }}{{ item.dest }}"
    owner: "root"
    group: "root"
    mode: "0644"
  loop:
    - {dest: "/etc/systemd/system/genesis_registry.service"}
  become: true

- name: Genesis Registry | templating template files
  ansible.builtin.template:
    dest: "{{ item }}"
    src: "{{ ansible_os_family | lower }}{{ item + '.j2' }}"
    mode: "0644"
  loop: 
    - "{{ genesis_registry.conf }}"
  become: true
  notify:
    - genesis registry restart service

- name: Genesis Registry | flush handlers
  ansible.builtin.meta: flush_handlers

- name: Genesis Registry | check service is available
  ansible.builtin.uri:
    url: "http://{{ genesis_registry.addr }}"
    method: GET
    timeout: 3
  failed_when: false
  register: _result
  until: _result.status == 200
  retries: 5
  delay: 5

- name: Genesis Registry | pull registry image from seed registry
  ansible.builtin.shell: >-
    nerdctl pull \
      {{ containerd_insecure_registries.seed_registry }}/{{ item }}
  become: true
  loop: "{{ genesis_registry.images }}"

- name: Genesis Registry | tag registry image for genesis registry
  ansible.builtin.shell: >-
    nerdctl tag \
      {{ containerd_insecure_registries.seed_registry }}/{{ item }} \
      {{ hostvars[inventory_hostname].ip }}:{{ genesis_registry_port }}/{{ item }}
  become: true
  loop: "{{ genesis_registry.images }}"

- name: Genesis Registry | push registry image to each genesis registry
  ansible.builtin.shell: >-
    nerdctl push \
      {{ hostvars[inventory_hostname].ip }}:{{ genesis_registry_port }}/{{ item }}
  become: true
  loop: "{{ genesis_registry.images }}"

- name: Genesis Registry | add genesis registry section in haproxy.cfg
  ansible.builtin.blockinfile:
    path: "/etc/haproxy/haproxy.cfg"
    mode: "0600"
    insertafter: EOF
    marker: "# {mark} GENESIS REGISTRY BLOCK"
    block: >-
      listen localregistry
          bind {{ containerd_insecure_registries.seed_registry }}
          option forwardfor except 127.0.0.0/8
          balance {{ balance }}
          option httpchk GET /
          {% for h in groups['kube_control_plane'] %}
          server {{ h }} {{ hostvars[h].ip }}:{{ registry_service_nodeport }} check inter {{ inter }} rise {{ rise }} fall {{ fall }} on-marked-down shutdown-sessions
          {% endfor %}

      listen genesisregistry
          bind {{ containerd_insecure_registries.genesis_registry }}
          option forwardfor except 127.0.0.0/8
          balance {{ balance }}
          option httpchk GET /
          {% for h in groups['kube_control_plane'] %}
          server {{ h }} {{ hostvars[h].ip }}:{{ genesis_registry_port }} check inter {{ inter }} rise {{ rise }} fall {{ fall }} on-marked-down shutdown-sessions
          {% endfor %}
  become: true

- name: Genesis Registry | take down offline services
  ansible.builtin.shell: >-
    ./offline_services.sh --down registry
  args:
    chdir: "{{ playbook_dir }}/scripts"
  become: true
  register: res
  failed_when: res.rc not in [0, 10]
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  run_once: true

- name: Genesis Registry | apply patch to kubernetes static pods
  ansible.builtin.replace:
    path: "{{ k8s_manifest_dir }}/{{ item.name }}.yaml"
    regexp: "{{ containerd_insecure_registries.seed_registry }}"
    replace: "{{ containerd_insecure_registries.genesis_registry }}"
  become: true
  loop: "{{ k8s_services }}"

- name: Genesis Registry | restart haproxy and kubelet service
  ansible.builtin.service:
    name: "{{ item }}"
    state: "restarted"
  become: true
  loop:
    - haproxy.service
    - kubelet.service

- name: Genesis Registry | pause before checking kubernetes services
  ansible.builtin.pause:
    seconds: 10

- name: Genesis Registry | wait until kubernetes services are running.
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: kube-system
    label_selectors:
      - tier = control-plane
      - "component = {{ item.name }}"
    wait: true
    wait_sleep: 5
    wait_timeout: 120
  register: _result
  become: true
  until: not _result.failed
  retries: 5
  delay: 5
  delegate_to: localhost
  run_once: true
  loop: "{{ k8s_services }}"

# cannot use kubernetes.core.k8s_json_patch 
# since kube-proxy patch needs to specify name in addition to image.
# So I use kubectl patch command.
- name: Genesis Registry | apply patch to kube-proxy daemonset
  ansible.builtin.command: >-
    kubectl patch ds kube-proxy -n kube-system -p \
      '{"spec": {"template": {"spec": {"containers": [{"name": "kube-proxy", "image": "{{ containerd_insecure_registries.genesis_registry }}/kube-proxy:{{ kube_version }}"}]}}}}'
  become: true
  delegate_to: localhost
  run_once: true

- name: Genesis Registry | apply patch to registry replicaset
  kubernetes.core.k8s_json_patch:
    kind: ReplicaSet
    namespace: "{{ registry_namespace }}"
    name: registry
    patch:
      - op: replace
        path: /spec/template/spec/containers/0/image
        value: "{{ containerd_insecure_registries.genesis_registry }}/library/registry:{{ registry_version }}"
  become: true
  delegate_to: localhost
  run_once: true

- name: Genesis Registry | get registry pod name
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ registry_namespace }}"
    label_selectors:
      - "k8s-app=registry"
  register: registry_pod
  become: true
  delegate_to: localhost
  run_once: true

- name: Genesis Registry | apply patch to registry pod
  kubernetes.core.k8s_json_patch:
    kind: Pod
    namespace: "{{ registry_namespace }}"
    name: "{{ registry_pod.resources[0].metadata.name }}"
    patch:
      - op: replace
        path: /spec/containers/0/image
        value: "{{ containerd_insecure_registries.genesis_registry }}/library/registry:{{ registry_version }}"
  become: true
  delegate_to: localhost
  run_once: true

- name: Genesis Registry | apply patch to csi-rbdplugin daemonset
  kubernetes.core.k8s_json_patch:
    kind: DaemonSet
    namespace: ceph-csi
    name: csi-rbdplugin
    patch: "{{ rbdplugin_patch_list }}"
  become: true
  delegate_to: localhost
  run_once: true

- name: Genesis Registry | apply patch to csi-rbdplugin-provisioner deployment
  kubernetes.core.k8s_json_patch:
    kind: Deployment
    namespace: ceph-csi
    name: csi-rbdplugin-provisioner
    patch: "{{ provisioner_patch_list }}"
  become: true
  delegate_to: localhost
  run_once: true
...
