---
- name: Cluster | create a single-node cluster on the primary MDM
  ansible.builtin.command: >-
    scli --create_mdm_cluster \
      --master_mdm_name {{ groups['mdm'][0] }} \
      --master_mdm_ip {% for siface in storage_iface_names %}{{ hostvars[groups['mdm'][0]]['ansible_'+siface].ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %}
      --master_mdm_management_ip {{ hostvars[groups['mdm'][0]]['ansible_'+mgmt_iface_name].ipv4.address }} \
      --cluster_virtual_ip {{ mdm_ip|join(',') }} \
      --master_mdm_virtual_ip_interface {{ storage_iface_names|join(',') }} \
      --accept_license \
      --approve_certificate
  register: res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: res.rc not in [0, 7]
  changed_when: res.rc == 0

- name: Cluster | change the default MDM password
  ansible.builtin.shell: >-
    scli --login --username admin --password admin --approve_certificate && \
    scli --set_password --old_password admin --new_password '{{ mdm_password }}'
  register: res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: res.rc not in [0, 7]
  changed_when: res.rc == 0
  no_log: true

- name: Cluster | add the secondary MDM to the MDM cluster
  ansible.builtin.shell: >-
    scli --login --username admin --password '{{ mdm_password }}' && \
    scli --add_standby_mdm \
      --new_mdm_name {{ groups['mdm'][1] }} \
      --mdm_role manager \
      --new_mdm_ip {% for siface in storage_iface_names %}{{ hostvars[groups['mdm'][1]]['ansible_'+siface].ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %} \
      --new_mdm_management_ip {{ hostvars[groups['mdm'][1]]['ansible_'+mgmt_iface_name].ipv4.address }} \
      --new_mdm_virtual_ip_interface {{ storage_iface_names|join(',') }}
  register: res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: res.rc not in [0, 7]
  changed_when: res.rc == 0
  no_log: true

- name: Cluster | add a tiebreaker to the MDM cluster
  ansible.builtin.shell: >-
    scli --login --username admin --password '{{ mdm_password }}' && \
    scli --add_standby_mdm \
      --new_mdm_name {{ groups['mdm'][2] }} \
      --mdm_role tb \
      --new_mdm_ip {% for siface in storage_iface_names %}{{ hostvars[groups['mdm'][2]]['ansible_'+siface].ipv4.address }}{% if not loop.last %},{% endif %}{% endfor %} \
      --new_mdm_management_ip {{ hostvars[groups['mdm'][2]]['ansible_'+mgmt_iface_name].ipv4.address }}
  register: res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: res.rc not in [0, 7]
  changed_when: res.rc == 0
  no_log: true

- name: Cluster | get the secondary MDM id
  ansible.builtin.shell: >-
    scli --query_cluster|grep 'Manager'|cut -d',' -f2|cut -d' ' -f3
  register: secondary_mdm_res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: secondary_mdm_res.rc != 0
  changed_when: false
  
- name: Cluster | get the tiebreaker id
  ansible.builtin.shell: >-
    scli --query_cluster |grep 'Tie-Breaker'|cut -d',' -f2|cut -d' ' -f3
  register: tiebreaker_res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: tiebreaker_res.rc != 0
  changed_when: false
  
- name: Cluster | set facts for secondary and tiebreaker id
  ansible.builtin.set_fact:
    secondary_mdm_id: "{{ secondary_mdm_res.stdout }}"
    tiebreaker_id: "{{ tiebreaker_res.stdout }}"
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true

- name: Cluster | switch to 3-node cluster mode
  ansible.builtin.shell: >-
    scli --login --username admin --password '{{ mdm_password }}' && \
    scli --switch_cluster_mode \
      --cluster_mode 3_node \
      --add_slave_mdm_id {{ secondary_mdm_id }} \
      --add_tb_id {{ tiebreaker_id }}
  register: res
  delegate_to: "{{ groups['mdm'][0] }}"
  run_once: true
  failed_when: res.rc not in [0, 7]
  changed_when: res.rc == 0
  no_log: true
...
